<?php
/*
 * Copyright (c) 2017-2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Mdl\V20200326\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeMediaLiveHighlightResult response structure.
 *
 * @method array getInfo() Obtain Highlight results information.
 * @method void setInfo(array $Info) Set Highlight results information.
 * @method string getId() Obtain Collection id.
 * @method void setId(string $Id) Set Collection id.
 * @method string getChannelId() Obtain Media live broadcast channel id.
 * @method void setChannelId(string $ChannelId) Set Media live broadcast channel id.
 * @method integer getPageNum() Obtain Number of pages.
 * @method void setPageNum(integer $PageNum) Set Number of pages.
 * @method integer getPageSize() Obtain Paging Size.
 * @method void setPageSize(integer $PageSize) Set Paging Size.
 * @method integer getTotalNum() Obtain The total number of eligible entries in the background.
 * @method void setTotalNum(integer $TotalNum) Set The total number of eligible entries in the background.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeMediaLiveHighlightResultResponse extends AbstractModel
{
    /**
     * @var array Highlight results information.
     */
    public $Info;

    /**
     * @var string Collection id.
     */
    public $Id;

    /**
     * @var string Media live broadcast channel id.
     */
    public $ChannelId;

    /**
     * @var integer Number of pages.
     */
    public $PageNum;

    /**
     * @var integer Paging Size.
     */
    public $PageSize;

    /**
     * @var integer The total number of eligible entries in the background.
     */
    public $TotalNum;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param array $Info Highlight results information.
     * @param string $Id Collection id.
     * @param string $ChannelId Media live broadcast channel id.
     * @param integer $PageNum Number of pages.
     * @param integer $PageSize Paging Size.
     * @param integer $TotalNum The total number of eligible entries in the background.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("Info",$param) and $param["Info"] !== null) {
            $this->Info = [];
            foreach ($param["Info"] as $key => $value){
                $obj = new HighlightResInfoResp();
                $obj->deserialize($value);
                array_push($this->Info, $obj);
            }
        }

        if (array_key_exists("Id",$param) and $param["Id"] !== null) {
            $this->Id = $param["Id"];
        }

        if (array_key_exists("ChannelId",$param) and $param["ChannelId"] !== null) {
            $this->ChannelId = $param["ChannelId"];
        }

        if (array_key_exists("PageNum",$param) and $param["PageNum"] !== null) {
            $this->PageNum = $param["PageNum"];
        }

        if (array_key_exists("PageSize",$param) and $param["PageSize"] !== null) {
            $this->PageSize = $param["PageSize"];
        }

        if (array_key_exists("TotalNum",$param) and $param["TotalNum"] !== null) {
            $this->TotalNum = $param["TotalNum"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
